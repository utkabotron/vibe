"""
Report confirmation and submission handlers for Vibe Work Bot.
"""
import logging
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from handlers.conversation_states import (
    ConversationState,
    CALLBACK_BACK,
    CALLBACK_CONFIRM,
    CALLBACK_NEW_REPORT
)
from utils.bot_utils import (
    get_current_report,
    clear_current_report,
    format_report_summary,
    clean_chat_history,
    track_message,
    mark_report_message
)

logger = logging.getLogger(__name__)


async def confirm_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handle report confirmation.
    
    Args:
        update: Update object
        context: CallbackContext
        
    Returns:
        Next conversation state
    """
    query = update.callback_query
    await query.answer()
    
    # Handle back button
    if query.data == CALLBACK_BACK:
        # Go back to add another action
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="add_more")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="finish")]
        ])
        
        await query.edit_message_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—Ç—á—ë—Ç. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ?",
            reply_markup=reply_markup
        )
        return ConversationState.ADD_ANOTHER_ACTION
    
    # Handle confirm button
    if query.data == CALLBACK_CONFIRM:
        # Get report data
        current_report = get_current_report(context)
        
        # Add timestamp
        current_report['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # Save report to Google Sheets
        sheet_service = context.bot_data.get('sheet_service')
        if not sheet_service:
            logger.error("Sheet service not initialized")
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END
        
        try:
            # Save report using the new save_report method
            success = await sheet_service.save_report(current_report)
            
            if not success:
                # Handle save failure
                logger.error("Failed to save report: save_report returned False")
                keyboard = [
                    [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=CALLBACK_CONFIRM)],
                    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    reply_markup=reply_markup
                )
                return ConversationState.CONFIRM_REPORT
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—Ç—á–µ—Ç–∞
            await clean_chat_history(update, context)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç—á–µ—Ç–∞
            report_summary = format_report_summary(current_report)
            report_card = await query.message.reply_text(
                f"üìã <b>–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n\n"
                f"{report_summary}",
                parse_mode='HTML'
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç—á–µ—Ç–∞ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
            await mark_report_message(update, context, report_card.message_id)
            
            # –£–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            
            # Clear current report
            clear_current_report(context)
            
            # –ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            # await track_message(update, context, report_card.message_id)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —Ç–∞–∫ –∫–∞–∫ —É–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç"
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error saving report: {e}")
            
            # Create retry button
            keyboard = [
                [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=CALLBACK_CONFIRM)],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)[:50]}...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=reply_markup
            )
            return ConversationState.CONFIRM_REPORT
    
    logger.error(f"Invalid callback data: {query.data}")
    await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END


async def new_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    Handle new report creation after completing a report.
    
    Args:
        update: Update object
        context: CallbackContext
        
    Returns:
        Next conversation state
    """
    query = update.callback_query
    await query.answer()
    
    if query.data == CALLBACK_NEW_REPORT:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        await clean_chat_history(update, context)
        
        # Start a new report
        from handlers.start_handler import start_report
        return await start_report(update, context)
    
    logger.error(f"Invalid callback data: {query.data}")
    await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END
